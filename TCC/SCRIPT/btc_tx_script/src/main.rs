extern crate hex;
use hex::FromHex;

extern crate btc_tx_script;
use btc_tx_script as btctx;

fn main() {

  // example tx msg
  let tx_msg = "F9BEB4D974780000000000000000000002010000E293CDBE01000000016DBDDB085B1D8AF75184F0BC01FAD58D1266E9B63B50881990E4B40D6AEE3629000000008B483045022100F3581E1972AE8AC7C7367A7A253BC1135223ADB9A468BB3A59233F45BC578380022059AF01CA17D00E41837A1D58E97AA31BAE584EDEC28D35BD96923690913BAE9A0141049C02BFC97EF236CE6D8FE5D94013C721E915982ACD2B12B65D9B7D59E20A842005F8FC4E02532E873D37B96F09D6D4511ADA8F14042F46614A4C70C0F14BEFF5FFFFFFFF02404B4C00000000001976A9141AA0CD1CBEA6E7458A7ABAD512A9D9EA1AFB225E88AC80FAE9C7000000001976A9140EAB5BEA436A0484CFAB12485EFDA0B78B4ECC5288AC00000000";
  let vec_msg: Vec<u8> = Vec::from_hex(tx_msg).unwrap();

  /*for u in &vec_msg {
    print!("{}-", u);
  }
  println!("");*/

  let mut it = vec_msg.into_iter();
  let header = btctx::MsgHeader::new(it.by_ref());
  println!("\n{:?}", header);
  let tx = btctx::Tx::new(it.by_ref());
  println!("{:?}", tx);

}
